// build docker image task type
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.avast.gradle.docker-compose' version '0.13.4'
    id 'com.bmuschko.docker-remote-api' version '6.6.1'
    id 'java'
}

group = 'org.ndrshrzg'
version = '1.0'
sourceCompatibility = '11'

repositories {
    jcenter()
}

dependencies {
    // spring web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // spring data and mysql driver
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'mysql:mysql-connector-java'
    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // in memory db for quicker development when running spring application as standalone.
    // change datasource and jpa.database configuration in application.properties accordingly.
    //runtimeOnly 'com.h2database:h2'

    // test dependencies
    testRuntimeOnly 'com.h2database:h2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

build {
}

// run unit tests and print test result to console
test {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

// build docker image. Tag as used in docker-compose.yml
task buildBikeRentalImage(type: DockerBuildImage) {
    inputDir = file('.')
    images.add('bikerental-image:latest')
}

// specify docker-compose file
dockerCompose {
    useComposeFiles["docker-compose.yml"]
}

// custom task that builds java sources, docker image for BikeRental application and runs docker-compose
task runBikeRental {
    println("Executing tasks clean, build, buildBikeRentalImage and docker-compose up.")
    dependsOn('clean')
    dependsOn('build')
    dependsOn('buildBikeRentalImage')
    dependsOn('composeUp')
}